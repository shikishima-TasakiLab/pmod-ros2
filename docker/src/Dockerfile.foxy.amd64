# from: nvidia/cuda
ARG SRC_IMAGE
FROM ${SRC_IMAGE}
LABEL maintainer="Junya Shikishima"

SHELL ["/bin/bash", "-c"]

################
### ros core ###
################

# setup timezone
RUN echo 'Etc/UTC' > /etc/timezone && \
    ln -s /usr/share/zoneinfo/Etc/UTC /etc/localtime && \
    apt-get update && \
    apt-get install -q -y --no-install-recommends tzdata && \
    rm -rf /var/lib/apt/lists/*

# install packages
RUN apt-get update && apt-get install -q -y --no-install-recommends \
    dirmngr \
    gnupg2 \
    && rm -rf /var/lib/apt/lists/*

# setup sources.list
RUN echo "deb http://packages.ros.org/ros2/ubuntu focal main" > /etc/apt/sources.list.d/ros2-latest.list

# setup keys
RUN apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C1CF6E31E6BADE8868B172B4F42ED6FBAB17C654

# setup environment
ENV LANG C.UTF-8
ENV LC_ALL C.UTF-8

ENV ROS_DISTRO foxy

# install ros packages
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
        ros-foxy-ros-core=0.9.2-1* && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

# DooD
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
        ca-certificates \
        curl \
        gnupg \
        lsb-release \
        apt-transport-https && \
    curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg && \
    echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null && \
    apt-get update && \
    apt-get install -y \
        docker-ce-cli && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

################
### libtorch ###
################

RUN apt-get update && \
    apt-get install -q -y --no-install-recommends \
        git \
        wget \
        unzip && \
    rm -rf /var/lib/apt/lists/*

ARG CUDA_VERSION
ARG TORCH_VERSION
# Libtorch
# RUN cd /opt && \
#     wget --quiet https://download.pytorch.org/libtorch/${CUDA_VERSION}/libtorch-cxx11-abi-shared-with-deps-${TORCH_VERSION}%2B${CUDA_VERSION}.zip && \
#     unzip -q libtorch-cxx11-abi-shared-with-deps-${TORCH_VERSION}+${CUDA_VERSION}.zip && \
#     rm -f libtorch-cxx11-abi-shared-with-deps-${TORCH_VERSION}+${CUDA_VERSION}.zip
RUN cd /opt && \
    git clone -b v${TORCH_VERSION} --recurse-submodule https://github.com/pytorch/pytorch.git && \
    mkdir pytorch-build && \
    cd pytorch-build && \
    while :; do cmake -DBUILD_SHARED_LIBS:BOOL=ON -DCMAKE_BUILD_TYPE:STRING=Release -DPYTHON_EXECUTABLE:PATH=`which python3` -DCMAKE_INSTALL_PREFIX:PATH=../pytorch-install ../pytorch ; [[ $? -eq 0 ]] && break ; done && \
    while :; do cmake --build . --target install; [[ $? -eq 0 ]] && break ; done && \
    cd /opt && \
    mv pytorch-install libtorch && \
    rm -rf pytorch pytorch-build
ENV LD_LIBRARY_PATH $LD_LIBRARY_PATH:/opt/libtorch/lib

################
### ros base ###
################

# install bootstrap tools
RUN apt-get update && \
    apt-get install --no-install-recommends -y \
        build-essential \
        git \
        python3-colcon-common-extensions \
        python3-colcon-mixin \
        python3-rosdep \
        python3-vcstool && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

# bootstrap rosdep
RUN rosdep init && \
    rosdep update --rosdistro $ROS_DISTRO

# setup colcon mixin and metadata
RUN colcon mixin add default \
      https://raw.githubusercontent.com/colcon/colcon-mixin-repository/master/index.yaml && \
    colcon mixin update && \
    colcon metadata add default \
      https://raw.githubusercontent.com/colcon/colcon-metadata-repository/master/index.yaml && \
    colcon metadata update

# install ros2 packages
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
        ros-foxy-ros-base=0.9.2-1* && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

#####################################
### Packages required by PMOD-Net ###
#####################################

RUN apt-get update && \
    apt-get install -y --no-install-recommends \
        libyaml-cpp-dev \
        ros-${ROS_DISTRO}-pcl-conversions \
        ros-${ROS_DISTRO}-cv-bridge \
        ros-${ROS_DISTRO}-tf2-ros && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

WORKDIR /workspace

# setup entrypoint
COPY ./ros_entrypoint.sh /

ENTRYPOINT ["/ros_entrypoint.sh"]
CMD ["bash"]
